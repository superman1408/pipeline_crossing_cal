from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import datetime
def generate_pipeline_report(filename, input_data, calculation_results):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    style_title = ParagraphStyle(
        name='Title',
        fontName='Helvetica-Bold',
        fontSize=22,
        leading=26,
        alignment=1,  # Center
        spaceAfter=20,
        textColor=colors.HexColor("#1E3A8A")  # Navy blue
    )
    style_section = ParagraphStyle(
        name='Section',
        fontName='Helvetica-Bold',
        fontSize=14,
        leading=18,
        alignment=0,  # Left
        spaceBefore=12,
        spaceAfter=6,
        textColor=colors.HexColor("#111827")  # Dark gray-black
    )
    style_text = ParagraphStyle(
        name='Text',
        fontName='Helvetica',
        fontSize=10,
        leading=14,
        alignment=0,
        spaceAfter=4
    )
    story = []

    # --- Title ---
    story.append(Paragraph("Pipeline Crossing Design Report", style_title))
    story.append(Spacer(1, 0.2 * inch))
    # --- Project Info ---
    story.append(Paragraph("Project Details", style_section))
    story.append(Paragraph(f"<b>Report Date:</b> {datetime.date.today().strftime('%B %d, %Y')}", style_text))
    story.append(Paragraph("<b>Generated By:</b> Pipeline Simulation App", style_text))
    story.append(Paragraph("<b>Project Title:</b> Untitled Project (Please save your project to name it)", style_text))
    story.append(Spacer(1, 0.2 * inch))
    # --- Input Parameters ---
    story.append(Paragraph("1. Input Parameters", style_section))
    input_data_for_report = [["Parameter", "Value"]]
    for key, val in input_data.items():
        input_data_for_report.append([key.replace("_", " "), str(val)])
    table1 = Table(input_data_for_report, colWidths=[3.5 * inch, 2.5 * inch])
    table1.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ]))
    story.append(table1)
    story.append(Spacer(1, 0.2 * inch))
    # --- Calculation Results ---
    story.append(Paragraph("2. Calculation Results", style_section))
    output_data_for_report = [["Output Parameter", "Value"]]
    for key, val in calculation_results.items():
        if isinstance(val, (int, float)):
            val = f"{val:.3f}"
        output_data_for_report.append([key.replace("_", " "), val])

    table2 = Table(output_data_for_report, colWidths=[3.5 * inch, 2.5 * inch])
    table2.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ]))
    story.append(table2)

    # --- Generate PDF ---
    try:
        doc.build(story)
    except Exception as e:
        raise Exception(f"PDF generation failed: {e}")

# --- Sample Test Block ---
if __name__ == "__main__":
    sample_input = {"Pipe_Outside_Diameter": 1016, "Pipe_Wall_Thickness": 10, "Operating_Pressure": 1.5}
    sample_output = {"Barlow_Stress": 15.5, "Check_1": "Allowable", "Check_2": "Not Allowable"}
    generate_pipeline_report("safe_pipeline_report.pdf", sample_input, sample_output)
    print("Report generated as 'safe_pipeline_report.pdf'")
