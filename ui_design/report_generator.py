from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image # Import Image
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfgen import canvas # Import canvas for page numbers
import datetime
import os # Import os for path manipulation

LOGO_PATH = "Assests//ASHKamLogo (1).png" 

def _header_footer(canvas_obj, doc):
    """
    Function to add page numbers to the canvas.
    """
    canvas_obj.saveState()
    # Footer: Page number
    page_number_text = f"Page {doc.page}" #
    canvas_obj.setFont('Helvetica', 9) #
    canvas_obj.drawString(A4[0] - inch, 0.75 * inch, page_number_text) # Position at bottom right
    canvas_obj.restoreState()


def generate_pipeline_report(filename, input_data, calculation_results, username="N/A", project_title="Untitled Project"):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    # ----------- Styles -----------
    style_title = ParagraphStyle(
        name='Title',
        fontName='Helvetica-Bold',
        fontSize=22,
        leading=26,
        alignment=1,
        spaceAfter=20,
        textColor=colors.HexColor("#0D325c")
    )
    style_section = ParagraphStyle(
        name='Section',
        fontName='Helvetica-Bold',
        fontSize=14,
        leading=18,
        alignment=0,
        spaceBefore=12,
        spaceAfter=6,
        textColor=colors.HexColor("#111827")
    )
    style_text = ParagraphStyle(
        name='Text',
        fontName='Helvetica',
        fontSize=10,
        leading=14,
        alignment=0,
        spaceAfter=4
    )
    style_colored_text_green = ParagraphStyle(name='ColoredTextGreen', parent=style_text, textColor=colors.green)
    style_colored_text_red = ParagraphStyle(name='ColoredTextRed', parent=style_text, textColor=colors.red)
    style_colored_text_black = ParagraphStyle(name='ColoredTextBlack', parent=style_text, textColor=colors.black)
    story = []

    # ----------- Logo -----------
    if os.path.exists(LOGO_PATH): #
        try:
            logo = Image(LOGO_PATH, width=1 * inch, height=1 * inch) #
            logo.hAlign = 'CENTER' # Center the image
            story.append(logo) #
            story.append(Spacer(1, 0.2 * inch)) # Add some space after the logo
        except Exception as e:
            print(f"Warning: Could not load logo from {LOGO_PATH}. Error: {e}")
            # If logo fails to load, continue without it.
    else:
        print(f"Warning: Logo file not found at {LOGO_PATH}. Skipping logo insertion.")

    # ----------- Title & Meta -----------
    story.append(Paragraph("Pipeline Crossing Simulation Report", style_title))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("Project Details", style_section))
    story.append(Paragraph(f"<b>Report Date:</b> {datetime.datetime.now().strftime('%B %d, %Y %H:%M:%S')}", style_text))
    story.append(Paragraph(f"<b>Generated By:</b> {username}", style_text))
    story.append(Paragraph(f"<b>Project Title:</b> {project_title}", style_text))
    story.append(Spacer(1, 0.2 * inch))

    # ----------- Input Parameters -----------
    story.append(Paragraph("1. Input Parameters", style_section))
    input_data_for_report = [["Parameter", "Value", "Unit"]]
    input_units = { #
        "Pipe_Outside_Diameter": "mm",
        "Pipe_Wall_Thickness": "mm",
        "Specified_Minimum_Yield_Strength": "MPa",
        "Depth_of_Cover": "m",
        "Corrosion_Allowance": "mm",
        "Operating_Pressure": "MPa",
        "Operating_Temperature": "°C",
        "Impact_Factor": "-", # Dimensionless
        "Design_Wheel_Load_From_Single_Axle": "kN",
        "Soil_Unit_Weight": "kN/m³",
        "Design_Factor": "-", # Dimensionless
        "Design_Wheel_Load_From_Tandem_Axle": "kN",
        "Modulus_of_Soil_Reaction": "MPa",
        "Longitudinal_Joint_Factor": "-", # Dimensionless
        "Youngs_Modulus": "MPa",
        "Resilient_Modulus": "MPa",
        "Installation_Temperature": "°C",
        "Poissons_Ratio": "-", # Dimensionless
        "Coefficient_of_Thermal_Expansion": "/°C",
        "Earth_Load_Stiffness_Factor": "-", # Dimensionless
        "Earth_Load_Burial_Factor": "-", # Dimensionless
        "Earth_Load_Excavation_Factor": "-", # Dimensionless
        "Stiffness_Factor_KHh": "-", # Dimensionless
        "Geometry_Factor_GHh": "-", # Dimensionless
        "Stiffness_Factor_KLh": "-", # Dimensionless
        "Geometry_Factor_GLh": "-", # Dimensionless
        "Road_Axle_Configuration_Factor": "-", # Dimensionless
        "Road_Pavement_Type_Factor": "-", # Dimensionless
        "Fatigue_endurance_Limit_of_Girth_yield": "MPa",
        "Fatigue_endurance_Limit_of_Longitudinal_Weld": "MPa",
        "Pipe_Type": "-", # Categorical, no unit
        "Bored_Diameter_Option": "-", # Categorical, no unit
        "Soil_Type": "-", # Categorical, no unit
        "Steel_grade": "-", # Categorical, no unit
        "Codes_and_standards": "-", # Categorical, no unit
    }
    input_display_names = { #
        "Pipe_Outside_Diameter": "Pipe Outside Diameter",
        "Pipe_Wall_Thickness": "Pipe Wall Thickness",
        "Specified_Minimum_Yield_Strength": "SMYS",
        "Depth_of_Cover": "Depth of Cover",
        "Corrosion_Allowance": "Corrosion Allowance",
        "Operating_Pressure": "Operating Pressure",
        "Operating_Temperature": "Operating Temperature",
        "Impact_Factor": "Impact Factor",
        "Design_Wheel_Load_From_Single_Axle": "Design Wheel Load (Single Axle)",
        "Soil_Unit_Weight": "Soil Unit Weight",
        "Design_Factor": "Design Factor",
        "Design_Wheel_Load_From_Tandem_Axle": "Design Wheel Load (Tandem Axle)",
        "Modulus_of_Soil_Reaction": "Modulus of Soil Reaction",
        "Longitudinal_Joint_Factor": "Longitudinal Joint Factor",
        "Youngs_Modulus": "Young's Modulus",
        "Resilient_Modulus": "Resilient Modulus",
        "Installation_Temperature": "Installation Temperature",
        "Poissons_Ratio": "Poisson's Ratio",
        "Coefficient_of_Thermal_Expansion": "Coeff. of Thermal Expansion",
        "Earth_Load_Stiffness_Factor": "Earth Load Stiffness Factor",
        "Earth_Load_Burial_Factor": "Earth Load Burial Factor",
        "Earth_Load_Excavation_Factor": "Earth Load Excavation Factor",
        "Stiffness_Factor_KHh": "Stiffness Factor K_Hh",
        "Geometry_Factor_GHh": "Geometry Factor G_Hh",
        "Stiffness_Factor_KLh": "Stiffness Factor K_Lh",
        "Geometry_Factor_GLh": "Geometry Factor G_Lh",
        "Road_Axle_Configuration_Factor": "Road Axle Configuration Factor",
        "Road_Pavement_Type_Factor": "Road Pavement Type Factor",
        "Fatigue_endurance_Limit_of_Girth_yield": "Fatigue Endurance (Girth Yield)",
        "Fatigue_endurance_Limit_of_Longitudinal_Weld": "Fatigue Endurance (Long. Weld)",
        "Pipe_Type": "Pipe Type",
        "Bored_Diameter_Option": "Bored Diameter Option",
        "Soil_Type": "Soil Type",
        "Steel_grade": "Steel Grade",
        "Codes_and_standards": "Codes & Standards",
    }
    for key, display_name in input_display_names.items():
        val = input_data.get(key, "N/A")
        unit = input_units.get(key, "-") # Get the unit
        input_data_for_report.append([display_name, str(val), unit]) # Append parameter, value, and unit
    table1 = Table(input_data_for_report, colWidths=[2.5 * inch, 2.0 * inch, 1.5 * inch])
    table1.setStyle(TableStyle([ #
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ]))
    story.append(table1)
    story.append(Spacer(1, 0.2 * inch))

    # ----------- Calculation Results -----------
    story.append(Paragraph("2. Calculation Results", style_section))
    output_data_for_report = [["Output Parameter", "Value", "Unit"]]
    output_units = { #
        "Pipe_Wall_Thickness_Including_CA": "mm",
        "Bored_Diameter": "mm",
        "Barlow_Stress": "MPa",
        "Stress_due_to_Earth_Load": "MPa",
        "Cyclic_Circumferential_Stress": "MPa",
        "Cyclic_Longitudinal_Stress": "MPa",
        "Radial_Stress": "MPa",
        "Circumferential_Stress_S1": "MPa",
        "Longitudinal_Stress_S2": "MPa",
        "Effective_Stress_Seff": "MPa",
        "Barlow_Stress_Check": "-", # Check, no unit
        "Principle_Stress_Check": "-", # Check, no unit
        "Girth_Weld_Criteria_Check": "-", # Check, no unit
        "Longitudinal_Weld_Criteria_Check": "-", # Check, no unit
    }
    output_display_names = { #
        "Pipe_Wall_Thickness_Including_CA": "Pipe Wall Thickness (incl. CA)",
        "Bored_Diameter": "Bored Diameter",
        "Barlow_Stress": "Barlow Stress",
        "Stress_due_to_Earth_Load": "Stress due to Earth Load",
        "Cyclic_Circumferential_Stress": "Cyclic Circumferential Stress",
        "Cyclic_Longitudinal_Stress": "Cyclic Longitudinal Stress",
        "Radial_Stress": "Radial Stress",
        "Circumferential_Stress_S1": "Circumferential Stress (S1)",
        "Longitudinal_Stress_S2": "Longitudinal Stress (S2)",
        "Effective_Stress_Seff": "Effective Stress (S_eff)",
        "Barlow_Stress_Check": "Barlow Stress Check",
        "Principle_Stress_Check": "Principle Stress Check",
        "Girth_Weld_Criteria_Check": "Girth Weld Criteria Check",
        "Longitudinal_Weld_Criteria_Check": "Longitudinal Weld Criteria Check",
    }
    for key, display_name in output_display_names.items():
        actual_value = calculation_results.get(key, "N/A")
        unit = output_units.get(key, "-") # Get the unit
        
        if "Check" in key:
            if actual_value == "Allowable":
                val_to_display = Paragraph(str(actual_value), style_colored_text_green)
            elif actual_value == "Not Allowable":
                val_to_display = Paragraph(str(actual_value), style_colored_text_red)
            else:
                val_to_display = Paragraph(str(actual_value), style_colored_text_black)
        elif isinstance(actual_value, (int, float)):
            val_to_display = f"{actual_value:.3f}"
        else:
            val_to_display = str(actual_value)
            
        output_data_for_report.append([display_name, val_to_display, unit]) # Append parameter, value, and unit
    table2 = Table(output_data_for_report, colWidths=[2.5 * inch, 2.0 * inch, 1.5 * inch])
    table2.setStyle(TableStyle([ #
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ]))
    story.append(table2)

    try:
        # Build the PDF document, passing the _header_footer function for page numbering
        doc.build(story, onFirstPage=_header_footer, onLaterPages=_header_footer) 
    except Exception as e:
        raise Exception(f"PDF generation failed: {e}")